# Triggery CI - zostały wzmocnione dla lepszej integracji z GitHub
trigger:
  branches:
    include:
      - main
      - refs/heads/main  # Jawne odniesienie do pełnego identyfikatora brancha
  paths:
    include:
      - '*'              # Uwzględnia wszystkie pliki
    exclude:
      - README.md
      - .gitignore
      - terraform/*
      - docs/*
      - '*.md'           # Wyklucz wszystkie pliki markdown

# Pipeline variables
variables:
  # Container registry service connection
  dockerRegistryServiceConnection: 'Paka ACR'
  containerRegistry: '$(ACR_LOGIN_SERVER)'
  dockerfilePath: '$(Build.SourcesDirectory)/Dockerfile'
  tag: '$(Build.BuildId)'
  
  # Azure subscription - zmienione na ACR, który prawdopodobnie już istnieje
  azureSubscription: 'Paka ACR'
  resourceGroupName: 'paka-app'

stages:
- stage: Build
  displayName: 'Build and Push Docker Image'
  jobs:
  - job: BuildAndPush
    displayName: 'Build and Push Docker Image'
    pool:
      name: Default # Użyj puli agentów self-hosted
    steps:
    - task: Docker@2
      displayName: 'Build Docker Image'
      inputs:
        command: build
        repository: 'paka-server'
        dockerfile: $(dockerfilePath)
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          $(tag)
          latest

    - task: Docker@2
      displayName: 'Push Docker Image'
      inputs:
        command: push
        repository: 'paka-server'
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          $(tag)
          latest

    # Generate Prisma client during build
    - script: |
        echo "Running Prisma Generate"
        docker run --rm $(containerRegistry)/paka-server:$(tag) bunx prisma generate
      displayName: 'Generate Prisma Client'

    # Run tests (if applicable)
    - script: |
        echo "Running tests would go here"
      displayName: 'Run Tests'

# Etap wdrażania tymczasowo wyłączony - wymaga ręcznej konfiguracji Service Connection
# - stage: Deploy
#   displayName: 'Deploy to Azure Container App'
#   dependsOn: Build
#   condition: succeeded()
#  jobs:
#  - job: Deploy
#    displayName: 'Deploy Container App'
#    pool:
#      vmImage: 'ubuntu-latest'
#    steps:
#    - task: AzureCLI@2
#      displayName: 'Deploy to Container App'
#      inputs:
#        azureSubscription: $(azureSubscription)
#        scriptType: 'bash'
#        scriptLocation: 'inlineScript'
#        inlineScript: |
#          az extension add --name containerapp --upgrade
#          
#          # Update the container app with the new image
#          az containerapp update \
#            --name paka-app \
#            --resource-group $(resourceGroupName) \
#            --image $(containerRegistry)/paka-server:$(tag) \
#            --registry-server $(containerRegistry) \
#            --registry-username $(ACR_ADMIN_USERNAME) \
#            --registry-password $(ACR_ADMIN_PASSWORD)
#          
#          echo "Container App updated successfully!"
#
#    - task: AzureCLI@2
#      displayName: 'Run Database Migrations'
#      inputs:
#        azureSubscription: $(azureSubscription)
#        scriptType: 'bash'
#        scriptLocation: 'inlineScript'
#        inlineScript: |
#          # Create a temporary container to run migrations
#          az containerapp job create \
#            --name migration-job-$(tag) \
#            --resource-group $(resourceGroupName) \
#            --image $(containerRegistry)/paka-server:$(tag) \
#            --command "bunx" "prisma" "migrate" "deploy" \
#            --registry-server $(containerRegistry) \
#            --registry-username $(ACR_ADMIN_USERNAME) \
#            --registry-password $(ACR_ADMIN_PASSWORD) \
#            --cpu 0.5 --memory 1.0Gi \
#            --min-replicas 1 --max-replicas 1 \
#            --execution-type Once
#            
#          echo "Database migration job created successfully!"

# Etap weryfikacji tymczasowo wyłączony - wymaga działającego etapu Deploy
# - stage: Verify
#   displayName: 'Verify Deployment'
#   dependsOn: Deploy
#   condition: succeeded()
#  jobs:
#  - job: HealthCheck
#    displayName: 'Run Health Checks'
#    pool:
#      vmImage: 'ubuntu-latest'
#    steps:
#    - task: AzureCLI@2
#      displayName: 'Verify Container App Health'
#      inputs:
#        azureSubscription: $(azureSubscription)
#        scriptType: 'bash'
#        scriptLocation: 'inlineScript'
#        inlineScript: |
#          # Get the FQDN of the Container App
#          FQDN=$(az containerapp show --name paka-app --resource-group $(resourceGroupName) --query properties.configuration.ingress.fqdn -o tsv)
#          
#          # Test the health endpoint
#          echo "Testing health endpoint: https://$FQDN/api/health"
#          STATUS_CODE=$(curl -s -o /dev/null -w "%{http_code}" https://$FQDN/api/health)
#          
#          if [ "$STATUS_CODE" == "200" ]; then
#            echo "Health check passed!"
#          else
#            echo "Health check failed with status code: $STATUS_CODE"
#            exit 1
#          fi
